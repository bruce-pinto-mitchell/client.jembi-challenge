{"remainingRequest":"C:\\Repos\\Jembi\\client.jembi-challenge\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Repos\\Jembi\\client.jembi-challenge\\src\\components\\Search.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Repos\\Jembi\\client.jembi-challenge\\src\\components\\Search.vue","mtime":1551184515716},{"path":"C:\\Repos\\Jembi\\client.jembi-challenge\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1551183226560},{"path":"C:\\Repos\\Jembi\\client.jembi-challenge\\node_modules\\babel-loader\\lib\\index.js","mtime":1551183206315},{"path":"C:\\Repos\\Jembi\\client.jembi-challenge\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1551183226560},{"path":"C:\\Repos\\Jembi\\client.jembi-challenge\\node_modules\\vue-loader\\lib\\index.js","mtime":1551183228183}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport axios from \"axios\";\n\nexport default {\n    name: 'Search',\n    methods: {\n        onSearchClicked() {\n            const searchInput = document.querySelector('#searchInput');\n            if (parseInt(searchInput.value, 10) < 100 || parseInt(searchInput.value, 10) > 110) {\n                document.querySelector('#invalidInput').style.display = 'table-row';\n                return;\n            }\n            axios.get('http://localhost:3000/api/search?identifier=' + searchInput.value).then(function(response) {\n                if (response) {\n                    const searchResult = document.querySelector('#searchResult');\n                    const searchResultTable = document.querySelector('#searchResultTable');\n\n                    searchResult.style.display = 'flex';\n                    Object.keys(response.data.observation).forEach((key, index) => {\n                        const row = searchResultTable.insertRow(index);\n                        const keyCell = row.insertCell(0);\n                        const valueCell = row.insertCell(1);\n                        keyCell.innerHTML = key;\n                        valueCell.innerHTML = response.data.observation[key];\n                    })\n                }\n            });\n        }\n    }\n}\n",{"version":3,"sources":["Search.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Search.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n    <div>\r\n        <h2>Search</h2>\r\n        <table>\r\n            <tr class=\"search\">\r\n                <td>Enter Observation Identifier</td>\r\n                <td><input id=\"searchInput\" type=\"search\"><span class=\"hint\">Mock data examples range from 100 - 110</span></td>\r\n            </tr>\r\n            <tr>\r\n                <td colspan=\"2\"><button v-on:click=\"onSearchClicked()\">Search</button></td>\r\n            </tr>\r\n            <tr id=\"invalidInput\" style=\"display: none;\">\r\n                <td><span class=\"invalid-input\">For the purpose of this POC please enter a value between 100 and 110 (inclusive)</span></td>\r\n            </tr>\r\n        </table>\r\n        <div id=\"searchResult\" style=\"display: none; flex-direction: column;\">\r\n            <h3 >Search Result:</h3>\r\n            <table id=\"searchResultTable\">\r\n                <tr>\r\n                    <td></td>\r\n                    <td></td>\r\n                </tr>\r\n            </table>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import axios from \"axios\";\r\n\r\n    export default {\r\n        name: 'Search',\r\n        methods: {\r\n            onSearchClicked() {\r\n                const searchInput = document.querySelector('#searchInput');\r\n                if (parseInt(searchInput.value, 10) < 100 || parseInt(searchInput.value, 10) > 110) {\r\n                    document.querySelector('#invalidInput').style.display = 'table-row';\r\n                    return;\r\n                }\r\n                axios.get('http://localhost:3000/api/search?identifier=' + searchInput.value).then(function(response) {\r\n                    if (response) {\r\n                        const searchResult = document.querySelector('#searchResult');\r\n                        const searchResultTable = document.querySelector('#searchResultTable');\r\n\r\n                        searchResult.style.display = 'flex';\r\n                        Object.keys(response.data.observation).forEach((key, index) => {\r\n                            const row = searchResultTable.insertRow(index);\r\n                            const keyCell = row.insertCell(0);\r\n                            const valueCell = row.insertCell(1);\r\n                            keyCell.innerHTML = key;\r\n                            valueCell.innerHTML = response.data.observation[key];\r\n                        })\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n    .search {\r\n        margin-bottom: 20px;\r\n    }\r\n\r\n    .hint {\r\n        margin-left: 15px;\r\n        font-size: 10px;\r\n        font-style: italic;\r\n    }\r\n\r\n    .invalid-input {\r\n        font-size: 10px;\r\n        font-style: italic;\r\n        color: red;\r\n    }\r\n</style>\r\n"]}]}